name: Build & Publish

on:
  push:
    branches: ['*']

jobs:
  go-test:
    name: Go Test
    runs-on: ubuntu-24.04
    environment: prod
    permissions:
      id-token: write
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          ref: ${{ startsWith(github.event_name, 'pull_request') && github.event.pull_request.head.sha || '' }}

      - name: Get vault secrets
        id: vault_secrets
        uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3.3.0
        with:
          method: jwt
          url: ${{ vars.VAULT_ADDR }}
          path: ${{ vars.VAULT_AUTH_PATH }}
          role: ${{ vars.VAULT_ROLE }}
          secrets: |
            SHARED/data/common SONAR_ORG_GH | SONAR_ORG ;
            SHARED/data/common SONAR_LOGIN_GH | SONAR_TOKEN ;
            SHARED/data/common SONAR_KEY_GH | SONAR_KEY ;
            SHARED/data/common SONAR_HOST | SONAR_HOST ;
            SHARED/data/common DATADOG_API_KEY | DATADOG_API_KEY ;

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        # with:
        #   go-version-file: "${{ inputs.working_directory }}/go.mod"

      - name: Install linters
        run: go install golang.org/x/lint/golint@latest

      - name: Go fmt and lint
        id: go_static_analysis
        working-directory: ${{ inputs.working_directory }}
        run: |
          go fmt ./...
          golint ./...
          go vet ./...

      - name: suggest changes
        if: always()
        uses: reviewdog/action-suggester@4747dbc9f9e37adba0943e681cc20db466642158 # v1.21.0
        with:
          tool_name: go static analysis

      - name: Test
        if: always()
        uses: robherley/go-test-action@b19f6aadabfb1ad85079065b21aa2af132466468 # v0.6.0
        with:
          moduleDirectory: ${{ inputs.working_directory }}

      - name: Cache SonarQube packages
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 #v4.2.3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Enable SonarCloud project
        env:
          SONAR_TOKEN: ${{ steps.vault_secrets.outputs.SONAR_TOKEN }}
          SONAR_ORG: ${{ steps.vault_secrets.outputs.SONAR_ORG }}
          SONAR_KEY: ${{ steps.vault_secrets.outputs.SONAR_KEY }}
          SONAR_PROJECT: ${{ github.event.repository.name }}
        run: |
          VALID_TOKEN=$(curl --request GET -s --url 'https://sonarcloud.io/api/authentication/validate' --user "$SONAR_TOKEN:" | jq -r '.valid')
          if [ "$VALID_TOKEN" == "false" ]; then
            echo "Token is not valid."
            exit 1
          fi

          ALL_REPOS=$(curl --request GET -s --url 'https://sonarcloud.io/api/alm_integration/list_repositories?organization='"$SONAR_ORG" --user "$SONAR_TOKEN:")
          THIS_REPO=$(echo "$ALL_REPOS" | jq '.repositories[] | select(.label == "'"$SONAR_PROJECT"'")')
          IS_LINKED=$(echo "$THIS_REPO" | jq -r '.linkedProjects | length')

          if test "$IS_LINKED" -eq 0; then
            echo "Repository is not linked to SonarCloud. Will link it now."
            installationKey=$(echo "$THIS_REPO" | jq -r '.installationKey')

            # Link the project to SonarCloud
            curl --request POST -s \
              --url https://sonarcloud.io/api/alm_integration/provision_projects \
              --user "$SONAR_TOKEN:" \
              --data 'installationKeys='"$installationKey" \
              --data 'organization='"$SONAR_ORG"

            # Disable SonarCloud Automatic Analysis
            curl --request POST -s \
              --url https://sonarcloud.io/api/autoscan/activation \
              --user "$SONAR_TOKEN:" \
              --data 'enable=false' \
              --data 'projectKey='"$SONAR_KEY"'_'"$SONAR_PROJECT"
          else
            echo "Repository is already linked to SonarCloud. Will not link it again."
          fi

      - name: SonarQube scan
        uses: SonarSource/sonarqube-scan-action@2500896589ef8f7247069a56136f8dc177c27ccf # v5.2.0
        with:
          args: >
            -Dsonar.host.url=${{ steps.vault_secrets.outputs.SONAR_HOST }}
            -Dsonar.token=${{ steps.vault_secrets.outputs.SONAR_TOKEN }}
            -Dsonar.organization=${{ steps.vault_secrets.outputs.SONAR_ORG }}
            -Dsonar.projectKey=${{ steps.vault_secrets.outputs.SONAR_KEY }}_${{ github.event.repository.name }}
            -Dsonar.projectName=${{ github.event.repository.name }}
            -Dsonar.links.scm="https://github.com/${{ github.repository }}"
            -Dsonar.scm.provider=git
            ${{ startsWith(github.event_name, 'pull_request') && format('-Dsonar.pullrequest.branch={0} -Dsonar.pullrequest.key={1}', github.head_ref || github.ref_name, github.event.pull_request.number) || format('-Dsonar.branch.name={0}', github.head_ref || github.ref_name) }}

  chart-lint:
    name: Chart lint
    runs-on: ubuntu-24.04
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.7.0

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --config ct.yaml --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Run chart-testing (lint)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct lint --config ct.yaml --target-branch ${{ github.event.repository.default_branch }}

  build-docker:
    needs: go-test
    name: Build and Push - Docker
    runs-on: ubuntu-24.04
    environment: prod
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ startsWith(github.event_name, 'pull_request') && github.event.pull_request.head.sha || '' }}

      - name: "Set common variables"
        id: "common_variables"
        run: |
          RE='[^0-9A-Za-z-]+' # Allowed characters
          BRANCH_NAME_RAW="${{ github.head_ref || github.ref_name }}"
          BRANCH_NAME=$(echo "$BRANCH_NAME_RAW" | sed -E "s/$RE/-/g")
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "BRANCH_NAME_LOWER=${BRANCH_NAME,,}" >> $GITHUB_ENV
          echo "branch_name_lower=${BRANCH_NAME,,}" >> $GITHUB_OUTPUT

          echo "VAULT_SHORT=${{ vars.VAULT_SHORT }}" >> $GITHUB_ENV
          echo "VAULT_ADDR=${{ vars.VAULT_ADDR }}" >> $GITHUB_ENV
          echo "VAULT_ROLE=${{ vars.VAULT_ROLE }}" >> $GITHUB_ENV
          echo "REPOSITORY_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV

      - name: Get cluster credentials
        id: cluster_creds
        uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3.3.0
        with:
          method: jwt
          url: ${{ vars.VAULT_ADDR }}
          path: ${{ vars.VAULT_AUTH_PATH }}
          role: ${{ vars.VAULT_ROLE }}
          secrets: |
            ES/data/gke/${{ vars.CLUSTER_CREDENTIALS_NAME }} * ;
            SHARED/data/common artifact_registry_url | ARTIFACT_REGISTRY_URL ;
            SHARED/data/common artifact_registry_project | ARTIFACT_REGISTRY_PROJECT ;
            SHARED/data/common DATADOG_API_KEY | DATADOG_API_KEY ;
            ${{ vars.VAULT_SHORT }}/data/CI/${{ vars.CLUSTER_CREDENTIALS_NAME }} * | K8S_CLUSTER_ ;
            ${{ vars.VAULT_SHORT }}/data/${{ env.REPOSITORY_NAME }}/prod * ;

      - id: "auth"
        name: Auth GCloud
        uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_POOL_PROVIDER_NAME }}
          service_account: ${{ secrets.WORKLOAD_IDENTITY_SA_EMAIL }}

      - name: "Configure docker"
        run: "gcloud auth configure-docker ${{ steps.cluster_creds.outputs.ARTIFACT_REGISTRY_URL }}"

      - name: Prepare image string
        id: prepare_image_tag
        run: |
          image="${{ steps.cluster_creds.outputs.ARTIFACT_REGISTRY_URL }}/${{ steps.cluster_creds.outputs.ARTIFACT_REGISTRY_PROJECT }}/public-docker/$REPOSITORY_NAME"
          echo "DOCKER_FRIENDLY_IMAGE_TAG=${image,,}" >> $GITHUB_OUTPUT # Lowercase everything

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ steps.prepare_image_tag.outputs.DOCKER_FRIENDLY_IMAGE_TAG }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ github.event.release.tag_name }},enable=${{ github.event.release.tag_name && true || false }}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{version}}
            type=schedule
            type=sha,format=long,prefix=

      - id: buildx
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Build and push
        uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
        with:
          load: true
          tags: ${{ steps.meta.outputs.tags }} # TODO does this work still?
          labels: ${{ steps.meta.outputs.labels }}
          # file: ${{ inputs.docker_file_path }}
          # context: ${{ inputs.docker_context }}
          # build-contexts: ${{ inputs.docker_build_contexts }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          # target: ${{ inputs.docker_target }}
          # secrets: ${{ inputs.docker_secrets }}
          # secret-envs: ${{ inputs.docker_secret_envs }}
          # build-args: ${{ inputs.docker_build_args }}
          # secret-files: |
          #   "gcloud=${{ steps.auth.outputs.credentials_file_path }}"

      - name: push images
        run: docker push --all-tags ${{ steps.prepare_image_tag.outputs.DOCKER_FRIENDLY_IMAGE_TAG }}

  publish-chart:
    name: Publish Helm Chart
    needs: chart-lint
    runs-on: ubuntu-24.04
    environment: prod
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ startsWith(github.event_name, 'pull_request') && github.event.pull_request.head.sha || '' }}

      # TODO: Remove once HELM 3.18.1 is included in the ubuntu-24.04 image
      - name: Upgrade helm
        run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Get credentials
        id: vault-auth
        uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3.3.0
        with:
          method: jwt
          url: ${{ vars.VAULT_ADDR }}
          path: ${{ vars.VAULT_AUTH_PATH }}
          role: ${{ vars.VAULT_ROLE }}
          secrets: |
            ES/data/gke/${{ vars.CLUSTER_CREDENTIALS_NAME }} client_email ;
            SHARED/data/common artifact_registry_url | ARTIFACT_REGISTRY_URL ;
            SHARED/data/common artifact_registry_project | ARTIFACT_REGISTRY_PROJECT ;

      - id: set-variables
        name: Set variables
        run: |
          # Version variables
          echo "VERSION=${{ github.ref_type == 'tag' && github.ref_name || format('0.0.0-{0}', github.sha) }}" >> $GITHUB_ENV

      - id: auth
        name: Auth GCloud
        uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_POOL_PROVIDER_NAME }}
          service_account: ${{ secrets.WORKLOAD_IDENTITY_SA_EMAIL }}

      - id: package_and_push
        name: Package and push Helm chart
        run: |
          gcloud auth application-default print-access-token | helm registry login -u oauth2accesstoken --password-stdin https://$ARTIFACT_REGISTRY_URL

          # Deployment chart
          helm dependency build charts/nightscaler
          helm package charts/nightscaler --version $VERSION
          helm push nightscaler-$VERSION.tgz oci://$ARTIFACT_REGISTRY_URL/$ARTIFACT_REGISTRY_PROJECT/public-docker/chart

